% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_coltype_byname.R
\name{set_coltype_byname}
\alias{set_coltype_byname}
\title{Standardize column types by string match}
\usage{
set_coltype_byname(
  d,
  trim.names = NULL,
  factor.features = NULL,
  character.features = NULL,
  numeric.features = NULL,
  date.features = NULL,
  date.format = "\%m/\%d/\%Y"
)
}
\arguments{
\item{d}{a dataframe}

\item{trim.names}{vector of strings to be trimmed from column names in dataframe}

\item{factor.features}{vector of strings matched to columns converted to type factor}

\item{character.features}{vector of strings matched to columns converted to type character}

\item{numeric.features}{vector of strings matched to columns converted to type numeric}

\item{date.features}{vector of strings matched to columns converted to type date}

\item{date.format}{string containing the format of the input date to be supplied to as.Date}
}
\value{
a dataframe with column data types set as specified
}
\description{
Converts columns to factor, character, numeric, or date type by matching user-specified strings to target column names.
}
\examples{
\dontrun{
# a dataframe with NULLs and incorrect data types
messy_df = data.frame(to_num_col = c("1" ,"2" , "NULL", "5"),
                     to_date_col = c("2021-01-01", "2022-01-01", "2023-01-01", "NULL"),
                     to_factor_col = c(1,0,0,0),
                     to_character_col = c(123,456,568,789))


clean_df = set_coltype_byname(d = messy_df,
                             trim.names = "_col",
                             numeric.features = "num",
                             factor.features = "fact",
                             character.features = "char",
                             date.features = "date",
                             date.format = "\%Y-\%m-\%d")

dplyr::glimpse(clean_df)
}

}
