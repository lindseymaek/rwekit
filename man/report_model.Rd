% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/report_model.R
\name{report_model}
\alias{report_model}
\alias{Passed}
\alias{on}
\alias{to}
\alias{the}
\alias{broom::tidy()}
\alias{functions}
\title{Annotate model objects}
\usage{
report_model(
  x,
  outcome.var = NULL,
  d = NULL,
  factor.vars = NULL,
  variable.labels = NULL,
  report.inverse = NULL,
  round.percent = 0,
  round.estimate = 2,
  ratio.include.percent = FALSE,
  verbose = TRUE,
  p.round.method = 1,
  p.lead.zero = TRUE,
  ...
)
}
\arguments{
\item{x}{A model object}

\item{outcome.var}{A string containing the name of the outcome variable, for models with binomial outcomes only. If provided with d, the frequency of the outcome for the levels of each factor variable will be reported.}

\item{d}{The dataframe used to fit the model object, x.}

\item{factor.vars}{A vector of strings containing the names of independent model variables to be considered as factors for the reporting of outcome.var.}

\item{variable.labels}{A dataframe with the variable labels to be used to annotate and order variables in the model summary output. See Details.}

\item{report.inverse}{A vector of strings containing the names of independent model variables for which the inverse of the estimate is desired for reporting.}

\item{round.percent}{An integer representing the number of places to which the percent of the outcome should be rounded if ratio.include.percent=TRUE}

\item{round.estimate}{An integer representing the number of places to which the model estimate and confidence intervals are rounded.}

\item{ratio.include.percent}{Report the percent of the outcome frequency. Default is FALSE.}

\item{verbose}{See messages about model outputs. Default is TRUE}

\item{p.round.method}{Integer corresponding to desired rounding convention. See Details.}

\item{p.lead.zero}{Boolean: if FALSE, no 0 will be reported in the place before the decimal. Defaults to TRUE.}
}
\value{
A dataframe with an labeled model summary
}
\description{
Refine reporting of model summaries with labels and outcome frequencies.
}
\details{
# variable.labels
The dataframe passed to variable.labels must have two columns. The first column must contain the model terms exactly as the appear in the model. The second column must contain the desired labels. To view the expected values in column one, run report_model() supplying only the x argument and view the terms column.
The order in which model terms are reported can be controlled by the order of the labels specified in the variable.labels dataframe.

# p.round.method
Two methods are currently defined. Select 1 (default) to round values above 0.10 to two digits. Select 2 to round values above 0.10 to 1 digit.
APA format is equivalent to method=1 when lead.zero=FALSE.
}
\examples{
\dontrun{
# generate some random data for a made-up patient cohort
size = 2500
patient_id = sample(1:1000000,size)
sample_data = as.data.frame(patient_id) \%>\%
dplyr::mutate(outcome_flag = rbinom(size, 1, prob = c(0.1)),
                binary_var = factor(rbinom(size,1,prob=c(0.7))),
                numeric_var1=round(rchisq(size,5)),
                numeric_var2=runif(size),
                cat_var=factor(rbinom(size,3,prob=c(0.5)))) \%>\%
  dplyr::mutate(numeric_var1 = ifelse(outcome_flag==0, numeric_var1*numeric_var2,numeric_var1),
                cat_var = dplyr::case_when(cat_var==0~"A",
                                           cat_var==1~"B",
                                           cat_var==2~"C",
                                           TRUE ~ "D"))

# fit CoxPH model
surv_mod = survival::coxph(survival::Surv(event = outcome_flag, time = numeric_var1) ~ binary_var + cat_var + numeric_var2, data = sample_data)

# simple formatted model reporting
report_model(surv_mod)

# add labels

# some formatted labels for sample_data
mod_labels = data.frame(vars = c( "cat_varB", "cat_varC", "binary_var1", "numeric_var2"),
labs = c("Categorical variable B (Reference A)", "Categorical variable C (Reference A)","Binary variable (Reference negative class)","Uniform continuous variable"))

# supply labels to variable.labels argument
report_model(surv_mod, variable.labels = mod_labels)

# add frequency of outcome

report_model(surv_mod, variable.labels = mod_labels, outcome.var = "outcome_flag", d = sample_data)

}

}
